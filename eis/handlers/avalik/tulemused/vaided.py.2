# -*- coding: utf-8 -*- 
# $Id: vaided.py 792 2016-06-30 18:16:33Z ahti $

from cgi import FieldStorage
from simplejson import dumps
from eis.lib.baseresource import *
_ = i18n._
from eis.lib.pdf.vaideavaldus import VaideavaldusDoc
import eis.lib.ddocs as ddocs
from eis.lib.xtee.dhl import Dhl

log = logging.getLogger(__name__)

class VaidedController(BaseResourceController):
    """Vaide esitamine
    """
    _permission = 'sooritamine'
    _MODEL = model.Sooritaja
    # _INDEX_TEMPLATE = 'avalik/tulemused/otsing.mako'
    # _LIST_TEMPLATE = 'avalik/tulemused/otsing_list.mako'
    _EDIT_TEMPLATE = 'avalik/tulemused/vaie.mako'
    # _DEFAULT_SORT = '-sooritaja.id'
    _ITEM_FORM = forms.avalik.sooritamine.VaieForm
    _get_is_readonly = False

    def show(self):
        rc = self._check()
        if rc:
            return rc
        return BaseResourceController.show(self)

    def edit(self):
        rc = self._check()
        if rc:
            return rc

        id = self.request.matchdict.get('id')
        self._edit(self._MODEL.get(id))
        return self.render_to_response(self._EDIT_TEMPLATE)

    def _edit(self, item):
        self.c.item = item
        self.c.vaie = self.c.item.give_vaie()
        if self.c.vaie.staatus and self.c.vaie.staatus != const.V_STAATUS_ESITAMATA:
            self.c.is_edit = False
        return self.response_dict
        #return self.render_to_response(self._EDIT_TEMPLATE)

    def update(self):
        rc = self._check()
        if rc:
            return rc
        return BaseResourceController.update(self)
    
    def _update(self, item):
        vaie = item.give_vaie()
        kasutaja = item.kasutaja
        # salvestame andmed
        vaie.from_form(self.form.data, 'f_')
        kasutaja.from_form(self.form.data,'k_')
        aadress = kasutaja.give_aadress()
        aadress.from_form(self.form.data, 'a_', self)
        if vaie.otsus_epostiga:
            if not kasutaja.epost:
                errors = {'k_epost': _(u"Please enter the e-mail address to which the decision will be sent")}
                raise ValidationError(self, errors)
        else:
            if not aadress.kood3 and not aadress.normimata:
                errors = {'a_kood1': _(u"Please enter the address where the decision will be sent")}
                raise ValidationError(self, errors)                

        vaie.staatus = const.V_STAATUS_ESITAMATA
        vaie.esitamisaeg = datetime.now()
        if not vaie.vaide_nr:
            vaie.flush()
            vaie.vaide_nr = vaie.id

    def _after_update(self, id):
        """Mida teha peale õnnestunud salvestamist
        """        
        #self.c.closewindow = True
        self.c.is_edit = False
        return self.edit()

    def _gen_avaldus_pdf(self, vaie):
        doc = VaideavaldusDoc(self, vaie)
        data = doc.generate()
        if doc.error:
            self.error(doc.error)
            return        
        return data

    def _update_prepare_signature(self, id):
        """Allkirjastamise alustamine: brauserilt on saadud sert,
        selle kohta arvutatakse allkirjastatav räsi.
        """
        item = model.Sooritaja.get(id)
        vaie = item.give_vaie()
        
        # loome avalduse PDFi
        avaldus_pdf = self._gen_avaldus_pdf(vaie)

        # alustame allkirjastamist
        filedata, res = ddocs.DdocS.prepare_signature(self, avaldus_pdf, 'avaldus.pdf')
        if filedata:
            vaie.avaldus_dok = filedata
            model.session.commit()

        return res
    
    def _update_finalize_signature(self, id):
        """Allkirjastamise lõpetamine: brauserilt on saadud allkiri,
        see lisatakse pooleli oleva DDOC-faili sisse.
        """
        item = model.Sooritaja.get(id)
        vaie = item.give_vaie()

        filedata, signers = ddocs.DdocS.finalize_signature(self, vaie.avaldus_dok)
        if filedata:
            # salvestame allkirjastatud kinnitamata faili
            vaie.avaldus_dok = filedata
            vaie.avaldus_ext = const.BDOC
            vaie.staatus = const.V_STAATUS_ESITATUD
            vaie.esitamisaeg = datetime.now()            
            model.session.commit()

            # DVK kinni pandud 2015-06-25 Hele soovil
            # edastame vaideavalduse DVK kaudu HTMi
            #filename = 'vaideavaldus.%s' % (ext)
            #reg = Dhl(handler=self)
            #res = reg.sendDocuments_vaie(vaie.avaldus_dok, filename)

        return self._after_update(id)

    def _download(self, id, format):
        """Näita faili"""
        rc = self._check()
        if rc:
            return rc
        item = model.Sooritaja.get(id)
        vaie = item.give_vaie()

        liik = self.request.params.get('liik')
        if liik == 'otsus':
            filedata = vaie.otsus_dok
            filename = 'vaideotsus.%s' % (vaie.otsus_ext)
        else:
            filedata = vaie.avaldus_dok
            filename = 'vaideavaldus.%s' % (vaie.avaldus_ext)

        if not filedata:
            raise NotFound('Dokumenti ei leitud')        

        return utils.download(filedata, filename)

    def _check(self):
        id = self.request.matchdict.get('id')
        item = model.Sooritaja.get(id)
        tk = item and item.testimiskord
        saab = item and item.kasutaja_id == self.c.user.id and tk
        if saab and not item.vaie:
            dt = date.today()
            saab = (not tk.vaide_algus or tk.vaide_algus <= dt) and \
                   tk.vaide_tahtaeg and tk.vaide_tahtaeg >= dt and \
                   tk.tulemus_kinnitatud and \
                   item.kasutaja_id == self.c.user.id and \
                   (item.hindamine_staatus == const.H_STAATUS_HINNATUD and item.pallid != None or \
                    item.staatus == const.S_STAATUS_EEMALDATUD)
        if not saab:
            return Response(u'Ligipääs puudub')
